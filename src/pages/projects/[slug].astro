---
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { ProjectEntry } from '../../data/projects';
import { projectEntries } from '../../data/projects';
import { workEntries } from '../../data/work';
import { getCollection } from 'astro:content';
import { SITE, absoluteUrl, createCreativeWorkJsonLd } from '../../utils/site';

export function getStaticPaths() {
  return projectEntries.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

interface Props {
  project: ProjectEntry;
}

const { project } = Astro.props as Props;
const pageTitle = `${project.title} | Projects by Yashodhan`;
const pageDescription = project.metaDescription || project.summary;
const pageUrl = new URL(Astro.url.pathname, Astro.site ?? SITE.url).toString();
const ogImage = project.ogImage ?? SITE.defaultImage;
const structuredData = [
  createCreativeWorkJsonLd({
    title: project.title,
    description: project.summary,
    url: pageUrl,
    image: absoluteUrl(ogImage),
  }),
];

const relatedPosts = await getCollection('blog', ({ slug }) => project.relatedBlogSlugs?.includes(slug));
relatedPosts.sort((a, b) => b.data.publishedAt.getTime() - a.data.publishedAt.getTime());

const relatedWork = (project.relatedWorkSlugs ?? [])
  .map((slug) => workEntries.find((entry) => entry.slug === slug))
  .filter(Boolean);
---

<BaseLayout
  title={pageTitle}
  description={pageDescription}
  ogImage={ogImage}
  ogType="article"
  structuredData={structuredData}
>

  <article class="project" aria-labelledby="project-heading">
    <header class="project__hero">
      <p class="project__eyebrow">Project</p>
      <h1 id="project-heading">{project.title}</h1>
      <p class="project__tagline">{project.tagline}</p>
      <p class="project__summary">{project.summary}</p>
    </header>

    <section class="project__section" aria-labelledby="project-problem">
      <h2 id="project-problem">Problem</h2>
      <p>{project.problem}</p>
    </section>

    <section class="project__section" aria-labelledby="project-build">
      <h2 id="project-build">What I built</h2>
      <ul>
        {project.build.map((item) => (
          <li>{item}</li>
        ))}
      </ul>
    </section>

    <section class="project__section" aria-labelledby="project-outcome">
      <h2 id="project-outcome">Outcome</h2>
      <p>{project.outcome}</p>
    </section>

    {project.releaseNotes && project.releaseNotes.length > 0 && (
      <section class="project__section" aria-labelledby="project-notes">
        <h2 id="project-notes">Release notes</h2>
        <ul class="release-notes">
          {project.releaseNotes.map((note) => (
            <li>
              <time dateTime={note.date}>{new Date(note.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</time>
              <p>{note.note}</p>
            </li>
          ))}
        </ul>
      </section>
    )}

    {relatedWork.length > 0 && (
      <section class="project__section" aria-labelledby="project-related-work">
        <h2 id="project-related-work">Related work</h2>
        <ul class="related-list">
          {relatedWork.map((work) => (
            <li>
              <article class="related-card">
                <h3>{work.title}</h3>
                <p>{work.summary}</p>
                <a href={`/work/${work.slug}`}>Read case study</a>
              </article>
            </li>
          ))}
        </ul>
      </section>
    )}

    {relatedPosts.length > 0 && (
      <section class="project__section" aria-labelledby="project-related-writing">
        <h2 id="project-related-writing">Related writing</h2>
        <ul class="related-list">
          {relatedPosts.map((post) => (
            <li>
              <article class="related-card">
                <h3>{post.data.title}</h3>
                <p>{post.data.description}</p>
                <a href={`/blog/${post.slug}`}>Read post</a>
              </article>
            </li>
          ))}
        </ul>
      </section>
    )}
  </article>

  <style>
    .project {
      max-width: 78ch;
      margin: 0 auto;
      display: grid;
      gap: 2.5rem;
    }

    .project__hero {
      display: grid;
      gap: 0.75rem;
    }

    .project__eyebrow {
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-size: 0.85rem;
      color: var(--color-muted);
    }

    .project__tagline {
      margin: 0;
      font-weight: 600;
      color: var(--color-muted);
    }

    .project__summary {
      margin: 0;
      font-size: 1.1rem;
      line-height: 1.7;
      color: var(--color-muted);
    }

    .project__section h2 {
      margin-top: 0;
      font-size: 1.4rem;
    }

    .project__section ul {
      padding-left: 1.2rem;
      margin: 0;
      display: grid;
      gap: 0.6rem;
    }

    .project__section p {
      margin: 0;
      line-height: 1.7;
    }

    .release-notes {
      list-style: none;
      padding: 0;
      margin: 0;
      display: grid;
      gap: 1rem;
    }

    .release-notes li {
      border: 1px solid var(--color-border);
      border-radius: var(--radius-base);
      padding: 1.4rem;
      background: var(--color-surface);
      display: grid;
      gap: 0.35rem;
    }

    .release-notes time {
      font-weight: 600;
    }

    .related-list {
      list-style: none;
      padding: 0;
      margin: 0;
      display: grid;
      gap: 1rem;
    }

    .related-card {
      border: 1px solid var(--color-border);
      border-radius: var(--radius-base);
      padding: 1.6rem;
      background: var(--color-surface);
      display: grid;
      gap: 0.6rem;
    }

    .related-card h3 {
      margin: 0;
    }

    .related-card a {
      font-weight: 600;
      color: var(--color-accent);
    }

    .related-card a:hover,
    .related-card a:focus-visible {
      text-decoration: underline;
    }
  </style>
</BaseLayout>
