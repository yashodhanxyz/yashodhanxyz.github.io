---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { collectAllTags, filterPosts, getPublishedPosts, getReadTimeMinutes } from '../../utils/blog';
import { SITE, absoluteUrl, createWebsiteJsonLd } from '../../utils/site';

const pageTitle = 'Yashodhan | Blog';
const description = 'Insights, learnings, and notes from product work, storytelling, and discovery.';

const allPosts = await getPublishedPosts();
const tags = collectAllTags(allPosts);
const searchParams = Astro.url.searchParams;
const selectedTag = searchParams.get('tag') ?? '';
const query = searchParams.get('q') ?? '';

const filteredPosts = filterPosts(allPosts, { search: query, tag: selectedTag });

const formatDate = (date: Date) =>
  new Intl.DateTimeFormat('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
  }).format(date);

const buildQuery = (params: { tag?: string; q?: string }) => {
  const url = new URL('/blog', Astro.url);
  if (params.tag) {
    url.searchParams.set('tag', params.tag);
  }
  if (params.q) {
    url.searchParams.set('q', params.q);
  }
  return url.pathname + url.search;
};

const pageUrl = new URL(Astro.url.pathname + Astro.url.search, Astro.site ?? SITE.url).toString();
const structuredData = [
  createWebsiteJsonLd(),
  {
    '@context': 'https://schema.org',
    '@type': 'CollectionPage',
    name: 'Blog',
    url: pageUrl,
    description,
    mainEntity: filteredPosts.map((post) => ({
      '@type': 'Article',
      name: post.data.title,
      url: absoluteUrl(`/blog/${post.slug}`),
      description: post.data.description,
    })),
  },
];
---

<BaseLayout title={pageTitle} description={description} structuredData={structuredData}>
  <section class="blog-top" aria-labelledby="blog-heading">
    <h1 id="blog-heading">Blog</h1>
    <p class="lead">
      Essays and notes on product systems, research rituals, and the storytelling that keeps teams aligned.
    </p>
    <form method="get" class="filters" role="search">
      <div class="search-control">
        <label class="search-label">
          <span class="search-label__text">Search posts</span>
          <input
            type="search"
            name="q"
            value={query}
            placeholder="Search by keyword"
          />
        </label>
        {selectedTag && <input type="hidden" name="tag" value={selectedTag} />}
        <button type="submit">Search</button>
      </div>
      {(query || selectedTag) && (
        <a class="clear" href="/blog">Clear filters</a>
      )}
    </form>
    {tags.length > 0 && (
      <div class="tag-filter" aria-label="Filter by tag">
        <a class:list={['tag-chip', selectedTag === '' ? 'tag-chip--active' : undefined]} href={buildQuery({ q: query })}>
          All ({allPosts.length})
        </a>
        {tags.map(({ tag, count }) => (
          <a
            class:list={['tag-chip', selectedTag === tag ? 'tag-chip--active' : undefined]}
            href={buildQuery({ tag, q: query })}
          >
            {tag} ({count})
          </a>
        ))}
      </div>
    )}
  </section>

  <section class="post-list" aria-live="polite">
    {filteredPosts.length > 0 ? (
      <ul>
        {filteredPosts.map((post) => {
          const readTime = getReadTimeMinutes(post.body);
          return (
            <li>
              <article class="post-card">
                <header>
                  <h2>
                    <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                  </h2>
                  <p class="meta">
                    <span>{formatDate(post.data.publishedAt)}</span>
                    <span aria-hidden="true">â€¢</span>
                    <span>{readTime} min read</span>
                  </p>
                </header>
                {post.data.tldr ? <p class="tldr">{post.data.tldr}</p> : <p class="tldr">{post.data.description}</p>}
                {post.data.tags.length > 0 && (
                  <ul class="tag-row">
                    {post.data.tags.map((tag) => (
                      <li>
                        <a href={buildQuery({ tag, q: query })}>{tag}</a>
                      </li>
                    ))}
                  </ul>
                )}
                <a class="post-card__cta" href={`/blog/${post.slug}`}>Read the post</a>
              </article>
            </li>
          );
        })}
      </ul>
    ) : (
      <p class="empty-state">No posts matched your filters yet. Try a different keyword or tag.</p>
    )}
  </section>

  <style>
    .blog-top {
      display: grid;
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .lead {
      margin: 0;
      font-size: 1.1rem;
      max-width: 60ch;
      color: var(--color-muted);
    }

    .filters {
      display: grid;
      gap: 0.6rem;
      max-width: 520px;
    }

    .search-label {
      flex: 1;
      display: grid;
      gap: 0.35rem;
    }

    .search-control {
      display: flex;
      gap: 0.6rem;
      align-items: flex-end;
    }

    .search-label__text {
      font-size: 0.9rem;
      font-weight: 600;
      color: var(--color-muted);
    }

    .search-label input[type='search'] {
      width: 100%;
      padding: 0.65rem 0.85rem;
      border-radius: 12px;
      border: 1px solid var(--color-border);
      background: var(--color-surface);
      color: inherit;
    }

    .search-control button {
      padding: 0.65rem 1.1rem;
      border-radius: 999px;
      border: none;
      background: var(--color-accent);
      color: #f8fafc;
      font-weight: 600;
    }

    .clear {
      font-size: 0.9rem;
      color: var(--color-accent);
      width: max-content;
    }

    .tag-filter {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .tag-chip {
      display: inline-flex;
      align-items: center;
      gap: 0.35rem;
      padding: 0.4rem 0.9rem;
      border-radius: 999px;
      border: 1px solid var(--color-border);
      color: inherit;
      background: var(--color-surface);
      font-size: 0.9rem;
    }

    .tag-chip--active {
      background: rgba(37, 99, 235, 0.14);
      border-color: var(--color-accent);
      color: var(--color-accent);
    }

    .post-list ul {
      list-style: none;
      padding: 0;
      margin: 0;
      display: grid;
      gap: 1.6rem;
    }

    .post-card {
      border: 1px solid var(--color-border);
      border-radius: var(--radius-base);
      padding: 1.8rem;
      display: grid;
      gap: 0.75rem;
      background: var(--color-surface);
      transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
    }

    .post-card header h2 {
      margin: 0;
      font-size: 1.4rem;
    }

    .post-card header a {
      color: inherit;
    }

    .post-card header a:hover,
    .post-card header a:focus-visible {
      text-decoration: underline;
    }

    .meta {
      display: inline-flex;
      gap: 0.6rem;
      color: var(--color-muted);
      font-size: 0.9rem;
      margin: 0.4rem 0 0;
    }

    .tldr {
      margin: 0;
      line-height: 1.65;
    }

    .tag-row {
      list-style: none;
      padding: 0;
      margin: 0;
      display: inline-flex;
      flex-wrap: wrap;
      gap: 0.4rem;
      font-size: 0.85rem;
    }

    .tag-row a {
      padding: 0.3rem 0.6rem;
      border-radius: 999px;
      background: rgba(37, 99, 235, 0.12);
      color: var(--color-accent);
    }

    .post-card__cta {
      font-weight: 600;
      color: var(--color-accent);
      width: max-content;
    }

    .post-card__cta:hover,
    .post-card__cta:focus-visible {
      text-decoration: underline;
    }

    .post-card:hover,
    .post-card:focus-within {
      transform: translateY(-3px);
      box-shadow: 0 18px 36px rgba(15, 23, 42, 0.08);
    }

    .empty-state {
      margin: 2rem 0;
      color: var(--color-muted);
    }

    @media (max-width: 640px) {
      .search-control {
        flex-direction: column;
        align-items: stretch;
      }

      .search-control button {
        width: 100%;
      }
    }
  </style>
</BaseLayout>
